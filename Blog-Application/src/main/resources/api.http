//-------------------------- AUTHENTICATION --------------------------
### Authenticate as admin
POST http://localhost:8080/api/uaa/login
Content-Type: application/json

{
  "username": "admin",
  "password": "admin"
}

> {% client.global.set("admin_token", response.body.accessToken); %}

### Signup a user
POST http://localhost:8080/api/uaa/signup
Content-Type: application/json

{
  "username": "john",
  "password": "123",
  "firstname": "John",
  "lastname": "Doe",
  "email": "john.doe@miu.edu"
}

### Authenticate as user
POST http://localhost:8080/api/uaa/login
Content-Type: application/json

{
  "username": "harriet",
  "password": "123"
}

> {% client.global.set("token", response.body.accessToken); %}

### Create post
//-------------------------- POST --------------------------
POST http://localhost:8080/api/posts/
Authorization: Bearer {{token}}
Content-Type: application/json

{
    "title": "How to scale Microservices with Message Queues, Spring Boot, and Kubernetes",
    "body": "When you design and build applications at scale, you deal with two significant challenges: scalability and robustness. You should design your service so that even if it is subject to intermittent heavy loads, it continues to operate reliably. Take the Apple Store as an example. Every year millions of Apple customers preregister to buy a new iPhone. That’s millions of people all buying an item at the same time. If you were to picture the Apple store’s traffic as requests per second over time, this is what the graph could look like: "
}

### Get all posts
GET http://localhost:8080/api/posts
Authorization: Bearer {{token}}
Content-Type: application/json

### Update post

PUT http://localhost:8080/api/posts/6
Authorization: Bearer {{token}}
Content-Type: application/json

{
    "title": "Maharishi visits MIU",
    "body": "The Bagambhrini Golden Dome is opened..."
}

### Get post by Id
GET http://localhost:8080/api/posts/6
Authorization: Bearer {{token}}
Content-Type: application/json

### Get posts for user
GET http://localhost:8080/api/posts/user/amga
Authorization: Bearer {{token}}
Content-Type: application/json

//-------------------------- USER --------------------------
### Create a user
POST http://localhost:8080/api/users
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "username": "johnyB",
  "password": "123",
  "firstname": "John",
  "lastname": "Doe",
  "email": "john.doe@miu.edu"
}

### Read users
GET http://localhost:8080/api/users
Content-Type: application/json
Authorization: Bearer {{token}}

### Update user
PUT http://localhost:8080/api/users/6
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "password": "123",
  "email": "john@miu.edu"
}

### Read user by id
GET http://localhost:8080/api/users/6
Content-Type: application/json
Authorization: Bearer {{token}}

### Delete user by id
DELETE http://localhost:8080/api/users/2
Content-Type: application/json
Authorization: Bearer {{admin_token}}

//-------------------------- COMMENT --------------------------
### Create comment
POST http://localhost:8080/api/comments/post/1
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "body": "RabbitMQ is the best. Everyone should learn it from our brilliant professor Michael Zijlstra."
}

### Get all comments
GET http://localhost:8080/api/comments
Authorization: Bearer {{token}}
Content-Type: application/json

### Update comment by Id
PUT http://localhost:8080/api/comments/2
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "body": "very good post. I really liked it."
}

### Get comment by Id
GET http://localhost:8080/api/comments/2
Authorization: Bearer {{token}}
Content-Type: application/json

### Delete comment by Id
DELETE http://localhost:8080/api/comments/3
Authorization: Bearer {{token}}
Content-Type: application/json